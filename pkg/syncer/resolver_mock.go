// Code generated by MockGen. DO NOT EDIT.
// Source: resolver.go
//
// Generated by this command:
//
//	mockgen -source=resolver.go -destination=resolver_mock.go -package=syncer
//
// Package syncer is a generated GoMock package.
package syncer

import (
	context "context"
	net "net"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDNSResolver is a mock of DNSResolver interface.
type MockDNSResolver struct {
	ctrl     *gomock.Controller
	recorder *MockDNSResolverMockRecorder
}

// MockDNSResolverMockRecorder is the mock recorder for MockDNSResolver.
type MockDNSResolverMockRecorder struct {
	mock *MockDNSResolver
}

// NewMockDNSResolver creates a new mock instance.
func NewMockDNSResolver(ctrl *gomock.Controller) *MockDNSResolver {
	mock := &MockDNSResolver{ctrl: ctrl}
	mock.recorder = &MockDNSResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDNSResolver) EXPECT() *MockDNSResolverMockRecorder {
	return m.recorder
}

// LookupIPAddr mocks base method.
func (m *MockDNSResolver) LookupIPAddr(ctx context.Context, host string) ([]net.IPAddr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupIPAddr", ctx, host)
	ret0, _ := ret[0].([]net.IPAddr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupIPAddr indicates an expected call of LookupIPAddr.
func (mr *MockDNSResolverMockRecorder) LookupIPAddr(ctx, host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupIPAddr", reflect.TypeOf((*MockDNSResolver)(nil).LookupIPAddr), ctx, host)
}
