// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64 || wasm

package client

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type clientIn6Addr struct {
	_    structs.HostLayout
	In6U struct {
		_       structs.HostLayout
		U6Addr8 [16]uint8
	}
}

type clientSidlistData struct {
	_           structs.HostLayout
	SidlistSize uint32
	Sidlist     [10]clientIn6Addr
}

// loadClient returns the embedded CollectionSpec for client.
func loadClient() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ClientBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load client: %w", err)
	}

	return spec, err
}

// loadClientObjects loads client and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*clientObjects
//	*clientPrograms
//	*clientMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadClientObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadClient()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// clientSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type clientSpecs struct {
	clientProgramSpecs
	clientMapSpecs
	clientVariableSpecs
}

// clientProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type clientProgramSpecs struct {
	ClientEgress  *ebpf.ProgramSpec `ebpf:"client_egress"`
	ClientIngress *ebpf.ProgramSpec `ebpf:"client_ingress"`
}

// clientMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type clientMapSpecs struct {
	ClientInnerMap   *ebpf.MapSpec `ebpf:"client_inner_map"`
	ClientLookupMap  *ebpf.MapSpec `ebpf:"client_lookup_map"`
	ClientOuterMap   *ebpf.MapSpec `ebpf:"client_outer_map"`
	ClientReverseMap *ebpf.MapSpec `ebpf:"client_reverse_map"`
	PercpuSidlistMap *ebpf.MapSpec `ebpf:"percpu_sidlist_map"`
}

// clientVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type clientVariableSpecs struct {
}

// clientObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadClientObjects or ebpf.CollectionSpec.LoadAndAssign.
type clientObjects struct {
	clientPrograms
	clientMaps
	clientVariables
}

func (o *clientObjects) Close() error {
	return _ClientClose(
		&o.clientPrograms,
		&o.clientMaps,
	)
}

// clientMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadClientObjects or ebpf.CollectionSpec.LoadAndAssign.
type clientMaps struct {
	ClientInnerMap   *ebpf.Map `ebpf:"client_inner_map"`
	ClientLookupMap  *ebpf.Map `ebpf:"client_lookup_map"`
	ClientOuterMap   *ebpf.Map `ebpf:"client_outer_map"`
	ClientReverseMap *ebpf.Map `ebpf:"client_reverse_map"`
	PercpuSidlistMap *ebpf.Map `ebpf:"percpu_sidlist_map"`
}

func (m *clientMaps) Close() error {
	return _ClientClose(
		m.ClientInnerMap,
		m.ClientLookupMap,
		m.ClientOuterMap,
		m.ClientReverseMap,
		m.PercpuSidlistMap,
	)
}

// clientVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadClientObjects or ebpf.CollectionSpec.LoadAndAssign.
type clientVariables struct {
}

// clientPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadClientObjects or ebpf.CollectionSpec.LoadAndAssign.
type clientPrograms struct {
	ClientEgress  *ebpf.Program `ebpf:"client_egress"`
	ClientIngress *ebpf.Program `ebpf:"client_ingress"`
}

func (p *clientPrograms) Close() error {
	return _ClientClose(
		p.ClientEgress,
		p.ClientIngress,
	)
}

func _ClientClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed client_bpfel.o
var _ClientBytes []byte
