// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64

package client

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type clientIn6Addr struct{ In6U struct{ U6Addr8 [16]uint8 } }

type clientServerLookupKey struct {
	Addr clientIn6Addr
	Port uint16
}

type clientServerLookupValue struct {
	Sidlist     [10]clientIn6Addr
	SidlistSize int32
}

// loadClient returns the embedded CollectionSpec for client.
func loadClient() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ClientBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load client: %w", err)
	}

	return spec, err
}

// loadClientObjects loads client and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*clientObjects
//	*clientPrograms
//	*clientMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadClientObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadClient()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// clientSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type clientSpecs struct {
	clientProgramSpecs
	clientMapSpecs
}

// clientSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type clientProgramSpecs struct {
	ClientEgress  *ebpf.ProgramSpec `ebpf:"client_egress"`
	ClientIngress *ebpf.ProgramSpec `ebpf:"client_ingress"`
}

// clientMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type clientMapSpecs struct {
	ClientInnerMap     *ebpf.MapSpec `ebpf:"client_inner_map"`
	ClientLookupMap    *ebpf.MapSpec `ebpf:"client_lookup_map"`
	ClientOuterMap     *ebpf.MapSpec `ebpf:"client_outer_map"`
	ClientReverseMap   *ebpf.MapSpec `ebpf:"client_reverse_map"`
	ServerLookupMap    *ebpf.MapSpec `ebpf:"server_lookup_map"`
	ServerTempValueMap *ebpf.MapSpec `ebpf:"server_temp_value_map"`
}

// clientObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadClientObjects or ebpf.CollectionSpec.LoadAndAssign.
type clientObjects struct {
	clientPrograms
	clientMaps
}

func (o *clientObjects) Close() error {
	return _ClientClose(
		&o.clientPrograms,
		&o.clientMaps,
	)
}

// clientMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadClientObjects or ebpf.CollectionSpec.LoadAndAssign.
type clientMaps struct {
	ClientInnerMap     *ebpf.Map `ebpf:"client_inner_map"`
	ClientLookupMap    *ebpf.Map `ebpf:"client_lookup_map"`
	ClientOuterMap     *ebpf.Map `ebpf:"client_outer_map"`
	ClientReverseMap   *ebpf.Map `ebpf:"client_reverse_map"`
	ServerLookupMap    *ebpf.Map `ebpf:"server_lookup_map"`
	ServerTempValueMap *ebpf.Map `ebpf:"server_temp_value_map"`
}

func (m *clientMaps) Close() error {
	return _ClientClose(
		m.ClientInnerMap,
		m.ClientLookupMap,
		m.ClientOuterMap,
		m.ClientReverseMap,
		m.ServerLookupMap,
		m.ServerTempValueMap,
	)
}

// clientPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadClientObjects or ebpf.CollectionSpec.LoadAndAssign.
type clientPrograms struct {
	ClientEgress  *ebpf.Program `ebpf:"client_egress"`
	ClientIngress *ebpf.Program `ebpf:"client_ingress"`
}

func (p *clientPrograms) Close() error {
	return _ClientClose(
		p.ClientEgress,
		p.ClientIngress,
	)
}

func _ClientClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed client_bpfeb.o
var _ClientBytes []byte
