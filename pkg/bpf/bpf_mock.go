// Code generated by MockGen. DO NOT EDIT.
// Source: bpf.go
//
// Generated by this command:
//
//	mockgen -source=bpf.go -destination=bpf_mock.go -package=bpf
//
// Package bpf is a generated GoMock package.
package bpf

import (
	reflect "reflect"

	ebpf "github.com/cilium/ebpf"
	gomock "go.uber.org/mock/gomock"
)

// MockBpf is a mock of Bpf interface.
type MockBpf struct {
	ctrl     *gomock.Controller
	recorder *MockBpfMockRecorder
}

// MockBpfMockRecorder is the mock recorder for MockBpf.
type MockBpfMockRecorder struct {
	mock *MockBpf
}

// NewMockBpf creates a new mock instance.
func NewMockBpf(ctrl *gomock.Controller) *MockBpf {
	mock := &MockBpf{ctrl: ctrl}
	mock.recorder = &MockBpfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBpf) EXPECT() *MockBpfMockRecorder {
	return m.recorder
}

// CreateMap mocks base method.
func (m *MockBpf) CreateMap(spec *ebpf.MapSpec, pinDir string) (*ebpf.Map, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMap", spec, pinDir)
	ret0, _ := ret[0].(*ebpf.Map)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMap indicates an expected call of CreateMap.
func (mr *MockBpfMockRecorder) CreateMap(spec, pinDir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMap", reflect.TypeOf((*MockBpf)(nil).CreateMap), spec, pinDir)
}

// LoadMapFromId mocks base method.
func (m *MockBpf) LoadMapFromId(id ebpf.MapID) (*ebpf.Map, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadMapFromId", id)
	ret0, _ := ret[0].(*ebpf.Map)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadMapFromId indicates an expected call of LoadMapFromId.
func (mr *MockBpfMockRecorder) LoadMapFromId(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadMapFromId", reflect.TypeOf((*MockBpf)(nil).LoadMapFromId), id)
}

// LoadPinnedMap mocks base method.
func (m *MockBpf) LoadPinnedMap(pinPath string) (*ebpf.Map, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadPinnedMap", pinPath)
	ret0, _ := ret[0].(*ebpf.Map)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadPinnedMap indicates an expected call of LoadPinnedMap.
func (mr *MockBpfMockRecorder) LoadPinnedMap(pinPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadPinnedMap", reflect.TypeOf((*MockBpf)(nil).LoadPinnedMap), pinPath)
}

// LookupMap mocks base method.
func (m_2 *MockBpf) LookupMap(m *ebpf.Map, key, value any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "LookupMap", m, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// LookupMap indicates an expected call of LookupMap.
func (mr *MockBpfMockRecorder) LookupMap(m, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupMap", reflect.TypeOf((*MockBpf)(nil).LookupMap), m, key, value)
}

// PutMap mocks base method.
func (m_2 *MockBpf) PutMap(m *ebpf.Map, key, value any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "PutMap", m, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutMap indicates an expected call of PutMap.
func (mr *MockBpfMockRecorder) PutMap(m, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMap", reflect.TypeOf((*MockBpf)(nil).PutMap), m, key, value)
}
